package dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import model.RevenueItem;
import model.*;
public class SalesDao {

    private List<RevenueItem> getDummyRevenueItems()
    {
        List<RevenueItem> items = new ArrayList<RevenueItem>();

		/*Sample data begins*/
        for (int i = 0; i < 10; i++) {
            RevenueItem item = new RevenueItem();
            item.setDate(new Date());
            item.setNumShares(5);
            item.setAccountId(823985234);
            item.setPricePerShare(50.0);
            item.setStockSymbol("AAPL");
            item.setAmount(150.0);
            items.add(item);
        }
        /*Sample data ends*/

        return items;
    }
    public List<RevenueItem> getSalesReport(String month, String year) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to get sales report for a particular month and year
		 */

    	System.out.println("Start getSalesReport Function");
        final String DB_URL = "jdbc:mysql://localhost:3306/CSE305";
        final String USER = "root";
        final String PASS = "2002318";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            System.out.println("successfully connect to database");
            
            String query = "select * from Orders where YEAR(Date_time) = " + '\'' + year + '\'' + " and MONTH(Date_time) = " + '\'' + month + '\'' + " and OrderType = " + '\'' + "sell" + '\'';     
            
            System.out.println(query);
            ResultSet result=stmt.executeQuery(query);
            List<RevenueItem> items = new ArrayList<RevenueItem>();
            while (result.next()) {
                RevenueItem item = new RevenueItem();
                item.setDate(result.getDate("Date_time"));
                item.setNumShares(result.getInt("NOF_Shares"));
                item.setAccountId(result.getLong("Cus_Acc_Num"));
                item.setPricePerShare(result.getDouble("pricePerShare"));
                item.setStockSymbol(result.getString("StockSymbol"));
                item.setAmount(result.getDouble("Transaction_Fee"));
                items.add(item);
            }
            return items;


         } catch (Exception e) {
            e.printStackTrace();
         }

        return null;

    }



    public List<RevenueItem> getSummaryListing(String searchKeyword) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular stock,
		 * stock type or customer must be implemented
		 * Store the revenue generated by an item in the amount attribute
		 */

    	System.out.println("Start getSalesReport Function");
        final String DB_URL = "jdbc:mysql://localhost:3306/CSE305";
        final String USER = "root";
        final String PASS = "2002318";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            Statement stmt = conn.createStatement();
            System.out.println("successfully connect to database");
            
            String query = "select * from Orders where StockSymbol like \'%" + searchKeyword + "%\'";
            
            System.out.println(query);
            ResultSet result=stmt.executeQuery(query);
            List<RevenueItem> items = new ArrayList<RevenueItem>();
            while (result.next()) {
                RevenueItem item = new RevenueItem();
                item.setDate(result.getDate("Date_time"));
                item.setNumShares(result.getInt("NOF_Shares"));
                item.setAccountId(result.getLong("Cus_Acc_Num"));
                item.setPricePerShare(result.getDouble("pricePerShare"));
                item.setStockSymbol(result.getString("StockSymbol"));
                item.setAmount(result.getDouble("Transaction_Fee"));
                items.add(item);
            }
            return items;


         } catch (Exception e) {
            e.printStackTrace();
         }

        return null;
    }
}
